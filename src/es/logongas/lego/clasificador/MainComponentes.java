/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package es.logongas.lego.clasificador;

import es.logongas.lego.Microcontroller;
import es.logongas.lego.clasificador.modelo.Cinta;
import es.logongas.lego.clasificador.modelo.Clasificador;
import es.logongas.lego.clasificador.modelo.Empujador;
import es.logongas.lego.clasificador.modelo.Motor;
import es.logongas.lego.clasificador.modelo.SensorColor;
import es.logongas.lego.clasificador.modelo.SensorDigital;
import es.logongas.lego.clasificador.modelo.SensorDigitalPresion;
import es.logongas.lego.clasificador.modelo.SensorPosicion;
import java.awt.Color;
import javax.swing.SwingWorker;

/**
 *
 * @author Lorenzo González
 */
public class MainComponentes extends javax.swing.JFrame {

    Microcontroller mc;
    ViewClasificador viewClasificador;
    Config config;
    static String fileName;
    Motor motorCinta;
    SensorPosicion sensorPosicionInicial;
    SensorPosicion sensorPosicionSensorColor;
    SensorPosicion sensorPosicionEmpujadorAzul;
    SensorPosicion sensorPosicionEmpujadorRojo;
    Cinta cinta;
    SensorColor sensorColor;
    Motor motorEmpujadorAzul;
    SensorDigital sensorDigitalDelanteroEmpujadorAzul;
    SensorDigital sensorDigitalTraseroEmpujadorAzul;
    Empujador empujadorAzul;
    Motor motorEmpujadorRojo;
    SensorDigital sensorDigitalDelanteroEmpujadorRojo;
    SensorDigital sensorDigitalTraseroEmpujadorRojo;
    Empujador empujadorRojo;
    Clasificador clasificador;

    /**
     * Creates new form MainComponentes
     */
    public MainComponentes() {
        initComponents();
        viewClasificador = new ViewClasificador(this);
        viewClasificador.setVisible(true);
        mc = new Microcontroller("COM1");


        crearComponentes();


    }

    private void crearComponentes() {
        config = new Config(fileName);
        config.read();

        motorEmpujadorAzul = new Motor(mc, 2);
        sensorDigitalDelanteroEmpujadorAzul = new SensorDigitalPresion(mc, 4);
        sensorDigitalTraseroEmpujadorAzul = new SensorDigitalPresion(mc, 5);
        empujadorAzul = new Empujador(mc, motorEmpujadorAzul, sensorDigitalDelanteroEmpujadorAzul, sensorDigitalTraseroEmpujadorAzul);


        motorEmpujadorRojo = new Motor(mc, 3);
        sensorDigitalDelanteroEmpujadorRojo = new SensorDigitalPresion(mc, 2);
        sensorDigitalTraseroEmpujadorRojo = new SensorDigitalPresion(mc, 3);
        empujadorRojo = new Empujador(mc, motorEmpujadorRojo, sensorDigitalDelanteroEmpujadorRojo, sensorDigitalTraseroEmpujadorRojo);


        motorCinta = new Motor(mc, 1);
        sensorPosicionInicial = new SensorPosicion(mc, 1, config.getLowerLimitSensorPosicionInicio(), config.getUpperLimitSensorPosicionInicio());
        sensorPosicionSensorColor = new SensorPosicion(mc, 2, config.getLowerLimitSensorPosicionColor(), config.getUpperLimitSensorPosicionColor());
        sensorPosicionEmpujadorAzul = new SensorPosicion(mc, 3, config.getLowerLimitSensorPosicionSalida1(), config.getUpperLimitSensorPosicionSalida1());
        sensorPosicionEmpujadorRojo = new SensorPosicion(mc, 4, config.getLowerLimitSensorPosicionSalida2(), config.getUpperLimitSensorPosicionSalida2());
        cinta = new Cinta(mc, motorCinta, sensorPosicionInicial, sensorPosicionSensorColor, sensorPosicionEmpujadorAzul, sensorPosicionEmpujadorRojo);

        sensorColor = new SensorColor(mc, 0, config.getLowerLimitSensorColor1(), config.getUpperLimitSensorColor1(), config.getLowerLimitSensorColor2(), config.getUpperLimitSensorColor2());

        clasificador = new Clasificador(cinta, sensorColor, empujadorAzul, empujadorRojo);


        motorEmpujadorAzul.addActionListener(viewClasificador);
        motorEmpujadorRojo.addActionListener(viewClasificador);
        motorCinta.addActionListener(viewClasificador);
        sensorPosicionInicial.addActionListener(viewClasificador);
        sensorPosicionSensorColor.addActionListener(viewClasificador);
        sensorPosicionEmpujadorAzul.addActionListener(viewClasificador);
        sensorPosicionEmpujadorRojo.addActionListener(viewClasificador);
        sensorColor.addActionListener(viewClasificador);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonCalibrar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButtonMoverPosicionInicial = new javax.swing.JButton();
        jButtonMoverPosicionSensorColor = new javax.swing.JButton();
        jButtonMoverPosicionEmpujadorAzul = new javax.swing.JButton();
        jButtonMoverPosicionEmpujadorRojo = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonEmpujarRojo = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonEmpujarAzul = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButtonGetColor = new javax.swing.JButton();
        jLabelColor = new javax.swing.JLabel();
        jButtonRecargarConfiguracion = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButtonClasificar = new javax.swing.JButton();
        jButtonViewClasificador = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonCalibrar.setText("Calibrar");
        jButtonCalibrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalibrarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cinta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jButtonMoverPosicionInicial.setText("Mover a posición inicial");
        jButtonMoverPosicionInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoverPosicionInicialActionPerformed(evt);
            }
        });

        jButtonMoverPosicionSensorColor.setText("Mover a posición del sensor de color");
        jButtonMoverPosicionSensorColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoverPosicionSensorColorActionPerformed(evt);
            }
        });

        jButtonMoverPosicionEmpujadorAzul.setText("Mover a posición del empujador Azul");
        jButtonMoverPosicionEmpujadorAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoverPosicionEmpujadorAzulActionPerformed(evt);
            }
        });

        jButtonMoverPosicionEmpujadorRojo.setText("Mover a posición del empujador rojo");
        jButtonMoverPosicionEmpujadorRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoverPosicionEmpujadorRojoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonMoverPosicionInicial)
                    .addComponent(jButtonMoverPosicionSensorColor)
                    .addComponent(jButtonMoverPosicionEmpujadorAzul)
                    .addComponent(jButtonMoverPosicionEmpujadorRojo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButtonMoverPosicionInicial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMoverPosicionSensorColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMoverPosicionEmpujadorAzul)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMoverPosicionEmpujadorRojo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Empujador Rojo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jButtonEmpujarRojo.setText("Empujar");
        jButtonEmpujarRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmpujarRojoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonEmpujarRojo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonEmpujarRojo)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Empujador Azul", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jButtonEmpujarAzul.setText("Empujar");
        jButtonEmpujarAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmpujarAzulActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonEmpujarAzul)
                .addContainerGap(92, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonEmpujarAzul)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sensor Color", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jButtonGetColor.setText("Obtener Color");
        jButtonGetColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetColorActionPerformed(evt);
            }
        });

        jLabelColor.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelColor.setText("Desconocido");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonGetColor)
                    .addComponent(jLabelColor))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonGetColor)
                .addGap(18, 18, 18)
                .addComponent(jLabelColor)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jButtonRecargarConfiguracion.setText("Recargar Configuración");
        jButtonRecargarConfiguracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRecargarConfiguracionActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Clasificador", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jButtonClasificar.setText("Clasificar");
        jButtonClasificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClasificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonClasificar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButtonClasificar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonViewClasificador.setText("Ver Clasificador");
        jButtonViewClasificador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewClasificadorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonViewClasificador)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonCalibrar)
                                .addGap(28, 28, 28)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonRecargarConfiguracion)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRecargarConfiguracion)
                    .addComponent(jButtonCalibrar)
                    .addComponent(jButtonViewClasificador))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEmpujarRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmpujarRojoActionPerformed
        SwingWorker<Void, Void> swingWorker = (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                empujadorRojo.empujar();


                return null;
            }
        });

        swingWorker.execute();

    }//GEN-LAST:event_jButtonEmpujarRojoActionPerformed

    private void jButtonEmpujarAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmpujarAzulActionPerformed
        SwingWorker<Void, Void> swingWorker = (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                empujadorAzul.empujar();

                return null;
            }
        });

        swingWorker.execute();
    }//GEN-LAST:event_jButtonEmpujarAzulActionPerformed

    private void jButtonCalibrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalibrarActionPerformed
        Calibrar calibrar = new Calibrar(this, true, mc, config);
        calibrar.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCalibrarActionPerformed

    private void jButtonMoverPosicionInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoverPosicionInicialActionPerformed
        SwingWorker<Void, Void> swingWorker = (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                cinta.moverPosicionInicial();

                return null;
            }
        });

        swingWorker.execute();
    }//GEN-LAST:event_jButtonMoverPosicionInicialActionPerformed

    private void jButtonMoverPosicionSensorColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoverPosicionSensorColorActionPerformed
        SwingWorker<Void, Void> swingWorker = (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                cinta.moverPosicionSensorColor();

                return null;
            }
        });

        swingWorker.execute();
    }//GEN-LAST:event_jButtonMoverPosicionSensorColorActionPerformed

    private void jButtonMoverPosicionEmpujadorAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoverPosicionEmpujadorAzulActionPerformed
        SwingWorker<Void, Void> swingWorker = (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                cinta.moverPosicionEmpujadorAzul();

                return null;
            }
        });

        swingWorker.execute();
    }//GEN-LAST:event_jButtonMoverPosicionEmpujadorAzulActionPerformed

    private void jButtonMoverPosicionEmpujadorRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoverPosicionEmpujadorRojoActionPerformed
        SwingWorker<Void, Void> swingWorker = (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                cinta.moverPosicionEmpujadorRojo();

                return null;
            }
        });

        swingWorker.execute();
    }//GEN-LAST:event_jButtonMoverPosicionEmpujadorRojoActionPerformed

    private void jButtonGetColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetColorActionPerformed
        SwingWorker<Void, Void> swingWorker = (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                Color color = sensorColor.getColor();
                if (color == null) {
                    jLabelColor.setVisible(false);
                } else {
                    jLabelColor.setVisible(true);
                    jLabelColor.setForeground(color);
                    if (color == Color.YELLOW) {
                        jLabelColor.setText("Amarillo");
                    } else if (color == Color.BLACK) {
                        jLabelColor.setText("Negro");
                    } else {
                        jLabelColor.setText(color.toString());
                    }

                }

                return null;
            }
        });

        swingWorker.execute();
    }//GEN-LAST:event_jButtonGetColorActionPerformed

    private void jButtonRecargarConfiguracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRecargarConfiguracionActionPerformed
        crearComponentes();
    }//GEN-LAST:event_jButtonRecargarConfiguracionActionPerformed

    private void jButtonClasificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClasificarActionPerformed
        SwingWorker<Void, Void> swingWorker = (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                clasificador.clasificar();

                return null;
            }
        });

        swingWorker.execute();
    }//GEN-LAST:event_jButtonClasificarActionPerformed

    private void jButtonViewClasificadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewClasificadorActionPerformed
        viewClasificador.setVisible(true);
    }//GEN-LAST:event_jButtonViewClasificadorActionPerformed

            /**
             * @param args the command line arguments
             */
            public static void main(String args[]) {
                /* Set the Nimbus look and feel */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
                 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
                 */
                try {
                    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                            javax.swing.UIManager.setLookAndFeel(info.getClassName());
                            break;
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    java.util.logging.Logger.getLogger(MainComponentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    java.util.logging.Logger.getLogger(MainComponentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    java.util.logging.Logger.getLogger(MainComponentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                    java.util.logging.Logger.getLogger(MainComponentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                //</editor-fold>

                fileName = args[0];

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        new MainComponentes().setVisible(true);
                    }
                });
            }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCalibrar;
    private javax.swing.JButton jButtonClasificar;
    private javax.swing.JButton jButtonEmpujarAzul;
    private javax.swing.JButton jButtonEmpujarRojo;
    private javax.swing.JButton jButtonGetColor;
    private javax.swing.JButton jButtonMoverPosicionEmpujadorAzul;
    private javax.swing.JButton jButtonMoverPosicionEmpujadorRojo;
    private javax.swing.JButton jButtonMoverPosicionInicial;
    private javax.swing.JButton jButtonMoverPosicionSensorColor;
    private javax.swing.JButton jButtonRecargarConfiguracion;
    private javax.swing.JButton jButtonViewClasificador;
    private javax.swing.JLabel jLabelColor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    // End of variables declaration//GEN-END:variables
        }
